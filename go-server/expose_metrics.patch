6a7
> 	"time"
8a10,28
> 	"github.com/prometheus/client_golang/prometheus"
> 	"github.com/prometheus/client_golang/prometheus/promauto"
> )
> 
> var (
> 	httpRequests = promauto.NewCounter(
> 		prometheus.CounterOpts{
> 			Name: "go_server_http_request_count",
> 			Help: "Number of requests processed",
> 		},
> 	)
> 
> 	reqDuration = promauto.NewHistogram(
> 		prometheus.HistogramOpts{
> 			Name:    "go_server_response_duration",
> 			Help:    "Duration in seconds to process responses to requests",
> 			Buckets: []float64{10, 50, 100, 500},
> 		},
> 	)
16a37,39
> 	http.Handle("/metrics", prometheus.Handler())
> 	glog.Infof("Prometheus metrics exposed at path /metrics")
> 
21a45
> 	reqStart := time.Now()
23a48,50
> 	// increment requests count for prometheus metrics
> 	httpRequests.Inc()
> 
32a60,63
> 	duration := time.Now().Sub(reqStart)
> 
> 	// measure time taken to process request
> 	reqDuration.Observe(float64(duration / time.Millisecond))
